@using System.Collections.Frozen
@inject DatabaseContext DatabaseContext

<HtmxForm>
    <div class="modal-content">
        <div class="modal-header">
            <h1 id="@ModalConfig.TitleId" class="modal-title fs-5">@(Entity.Id == default ? "Create" : "Edit")</h1>
            <button type="button" data-bs-dismiss="modal" class="btn-close" aria-label="Close"></button>
        </div>

        <div class="modal-body">
            <div class="form-floating mb-3">
                <input type="hidden" name="@nameof(ToDo.Id)" value="@Entity.Id" />

                <input type="text" name="@nameof(ToDo.Title)" value="@Entity.Title" class="form-control" placeholder="title" />
                <label for="title" class="form-label">Title</label>
                @if (ServerErrors?.TryGetValue(nameof(ToDo.Title), out var errors) == true)
                {
                    foreach (var error in errors)
                    {
                        <div class="validation-message text-danger">@error</div>
                    }
                }
            </div>
        </div>

        <div class="modal-footer">
            <div class="form-floating mb-3">
                <button type="button" data-bs-dismiss="modal" class="btn btn-secondary">
                    Close
                </button>
                <button @attributes="@(HtmxForm.DefaultHtmxAttributes("/update-todo"))" type="button" class="btn btn-primary">
                    Save
                </button>
            </div>
        </div>
    </div>
</HtmxForm>

@code {
    [Parameter]
    [EditorRequired]
    public required ModalConfig ModalConfig { get; set; }

    [Parameter]
    public ToDo Entity { get; set; } = new();

    [Parameter]
    public FrozenDictionary<string, FrozenSet<string>>? ServerErrors { get; set; }
}

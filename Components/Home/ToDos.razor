@attribute [StreamRendering]

@inject DatabaseContext DatabaseContext

<ToDoModalEditForm>
    <Trigger>
        <div class="row mt-3">
            <div class="col">
                <button type="button" class="btn btn-lg btn-primary" data-bs-toggle="modal" data-bs-target="#@context.Id">
                    Create New ToDo
                </button>
            </div>
        </div>
    </Trigger>
</ToDoModalEditForm>
<hr />

@if (toDos == null)
{
    // Good spinner code <strong role="status">Loading... <span class="spinner-border" aria-hidden="true"></span></strong>
}
else if (toDos.Any())
{
    foreach (var toDo in toDos)
    {
        <div class="row">
            <ToDoModalEditForm Entity="toDo">
                <Trigger>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#@context.Id">
                        Edit
                    </button>
                </Trigger>
            </ToDoModalEditForm>
        </div>
    }
}

@code {
    private List<ToDo>? toDos = null;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var userId = HttpContext.GetRequiredUserId();

        toDos = await DatabaseContext.ToDos
            .AsNoTracking()
            .Include(t => t.ToDoItems.OrderByDescending(i => i.CreateDate))
            .Where(t => t.UserId == userId)
            .OrderByDescending(t => t.CreateDate)
            .ToListAsync();
    }
}

@attribute [StreamRendering]
@inject DatabaseContext DatabaseContext

<div id="@WrapperId">
    <ToDoModal ModalConfig="@BuildModalConfig(Guid.Empty)">
        <ModalTrigger>
            <div class="row mt-3">
                <div class="col">
                    <button type="button" data-bs-toggle="modal" data-bs-target="#@BuildModalConfig(Guid.Empty).Id" class="btn btn-lg btn-primary">
                        Create New ToDo
                    </button>
                </div>
            </div>
        </ModalTrigger>
    </ToDoModal>
    <hr />

    @if (toDos == null)
    {
        <strong role="status">Loading... <span class="spinner-border" aria-hidden="true"></span></strong>
    }
    else if (toDos.Any())
    {
        int skipCount = 0;
        int takeCount = 3;
        bool hasMore = true;

        while (hasMore)
        {
            var batch = toDos.Skip(skipCount).Take(takeCount);

            <div class="row justify-content-center">
                @foreach (var toDo in batch)
                {
                    var modalConfig = Modal.BuildModalConfig(toDo.Id);

                    <div class="col-lg-8 col-md-10 col-sm-12 mb-3">
                        <div class="card">
                            <div class="card-header text-center">
                                <h5>@toDo.Title</h5>
                            </div>
                            <div class="card-body">
                                <ul class="list-group">
                                    @foreach (var toDoItem in toDo.ToDoItems)
                                    {
                                        <ToDoItemListItem
                                            ToDoItemId="toDoItem.Id"
                                            Description="@toDoItem.Description"
                                            IsCompleted="toDoItem.IsCompleted"
                                        />
                                    }
                                </ul>

                                <div class="container mt-3">
                                    <ServerValidationMessage For="@toDo.Id.ToString()" />

                                    <div class="row">
                                        <div class="col-6 text-end">
                                            <ToDoModal ModalConfig="modalConfig" Model="toDo">
                                                <ModalTrigger>
                                                    <button type="button" data-bs-toggle="modal" data-bs-target="#@modalConfig.Id" class="btn btn-primary">
                                                        <SvgPencilSquare />
                                                    </button>
                                                </ModalTrigger>
                                            </ToDoModal>
                                        </div>
                                        
                                        <div class="col-6 text-start">
                                            <button
                                                type="button"
                                                hx-delete="@($"{Constants.ToDoDeletePath}/{toDo.Id}")"
                                                hx-disabled-elt="this"
                                                class="btn btn-danger"
                                            >
                                                <SvgTrash3 />
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer text-center text-body-secondary">
                                Created on: @toDo.CreateDate.ToString("MMMM/dd/yyyy h:mm tt")
                            </div>
                        </div>
                    </div>
                }
            </div>

            skipCount += takeCount;
            hasMore = toDos.Skip(skipCount).Any();
        }
    }
    else
    {
        <p>Nothing to do...</p>
    }
</div>

@code {
    private List<ToDoDto>? toDos = null;

    [Parameter]
    [EditorRequired]
    public required Guid UserId { get; set; }

    public static string WrapperId = "toDos";

    protected override async Task OnInitializedAsync()
    {
        toDos = await DatabaseContext.ToDos
            .Where(t => t.UserId == UserId)
            // Reaplace with dynamic sorting
            .OrderByDescending(dto => dto.CreateDate)
            .Select(t => new ToDoDto
            {
                Id = t.Id,
                Title = t.Title,
                CreateDate = t.CreateDate,
                ToDoItems = t.ToDoItems
                    .OrderBy(i => i.SortOrder)
                    .Select(i => new ToDoItemDto
                    {
                        Id = i.Id,
                        Description = i.Description,
                        IsCompleted = i.Status == ToDoStatus.Completed,
                    })
                    .ToList()
            })
            .ToListAsync();
    }
}

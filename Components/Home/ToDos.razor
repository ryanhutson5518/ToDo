@attribute [StreamRendering]

@inject DatabaseContext DatabaseContext

<div class="row">
    <Modal Props="createNewToDoModalProps">
        <Trigger>
            <button type="button" class="btn btn-lg btn-primary" data-bs-toggle="modal" data-bs-target="#@context.Id">
                Create New ToDo
            </button>
        </Trigger>
        <ModalTitle>
            <h1 class="modal-title fs-5" id="title_@context.Id">Create New ToDo</h1>
        </ModalTitle>
        <ModalBody>
            <p>Testing...</p>
        </ModalBody>
        <ModalFooter>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="button" class="btn btn-primary">Save changes</button>
        </ModalFooter>
    </Modal>
</div>


@if (toDos == null)
{
    // Good spinner code <strong role="status">Loading... <span class="spinner-border" aria-hidden="true"></span></strong>
}
else if (toDos.Any())
{
    foreach (var toDo in toDos)
    {
        <div class="row">
            <ToDoForm Entity="toDo" />
        </div>
    }
}

@code {
    private List<ToDo>? toDos = null;

    private ToDo.Components.Shared.Modal.ModalProps createNewToDoModalProps = new()
    {
        Id = "CreateNewToDoModal"
    };

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var userId = HttpContext.GetRequiredUserId();

        toDos = await DatabaseContext.ToDos
            .AsNoTracking()
            .Include(t => t.ToDoItems.OrderByDescending(i => i.CreateDate))
            .Where(t => t.UserId == userId)
            .OrderByDescending(t => t.CreateDate)
            .ToListAsync();
    }
}

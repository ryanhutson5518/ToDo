@inject DatabaseContext DatabaseContext

<EditForm Model="Input" FormName="@modalConfig.Id" Context="editContext">
    <Modal Config="modalConfig">
        <Trigger>
            @Trigger(modalConfig)
        </Trigger>
        <ModalTitle>
            <h1 class="modal-title fs-5" id="title_@modalConfig.Id">@(Entity.Id == default ? "Create" : "Edit")</h1>
        </ModalTitle>
        <ModalBody>
            <div id="fields_@modalConfig.Id" class="form-floating mb-3">
                <InputText @bind-Value="Input.Title" class="form-control" placeholder="title" />
                <label for="title" class="form-label">Title</label>
                <ValidationMessage For="() => Input.Title" class="text-danger" />
            </div>
        </ModalBody>
        <ModalFooter>
            <div class="form-floating mb-3">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button
                    type="button"
                    class="btn btn-primary"
                    hx-post="@($"/validate-todo/{Entity.Id}")"
                    hx-trigger="click"
                    hx-target="#fields_@modalConfig.Id"
                    hx-swap="innerHTML"
                >
                    Save
                </button>
            </div>
        </ModalFooter>
    </Modal>
</EditForm>

@code {
    private ModalConfig modalConfig = default!;


    [Parameter]
    public ToDo Entity { get; set; } = new();

    [Parameter]
    [EditorRequired]
    public RenderFragment<ModalConfig> Trigger { get; set; } = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override void OnInitialized()
    {
        modalConfig = new()
        {
            Id = $"Modal_{Entity.Id}"
        };

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            Input.Title = Entity.Title;
        }
    }

    public class InputModel
    {
        public string Title { get; set; } = string.Empty;
    }
}
